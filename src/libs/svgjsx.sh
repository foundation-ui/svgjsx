#!/bin/bash

# Default source and output directories
SOURCE_DIR="./svg"
OUTPUT_DIR="./icons"

# Function to display usage information
usage() {
  echo "Usage: pnpx fui/icons generate [options]"
  echo "Options:"
  echo " -s <source_dir>  Specify the source directory containing SVG files (default: ./svg)"
  echo " -o <output_dir>  Specify the output directory for the generated TSX files (default: ./icons)"
  echo " -h             Show this help message"
  exit 1
}

# Function to handle errors
error_exit() {
  echo "$1" >&2
  exit 1
}

# Parse command-line options
OPTIND=1
while getopts "s:o:h" opt; do
  case $opt in
  s)
    SOURCE_DIR="$OPTARG"
    ;;
  o)
    OUTPUT_DIR="$OPTARG"
    ;;
  h)
    usage
    ;;
  \?)
    echo "Invalid option: -$OPTARG" >&2
    usage
    ;;
  :)
    echo "Option -$OPTARG requires an argument." >&2
    usage
    ;;
  esac
done

# Shift the arguments to remove the parsed options
shift $((OPTIND - 1))

# Check if any non-option arguments are present
if [ $# -gt 0 ]; then
  echo "Unexpected argument(s): $*" >&2
  usage
fi

# Check if the source directory exists
if [ ! -d "$SOURCE_DIR" ]; then
  error_exit "Error: Source directory '$SOURCE_DIR' does not exist."
fi

# Output file for all icons
OUTPUT_FILE="$OUTPUT_DIR/index.tsx"

# Ensure output directory exists, create if not
mkdir -p "$OUTPUT_DIR" || error_exit "Error: Failed to create output directory '$OUTPUT_DIR'."

# Initialize the output file with the comment and necessary imports
echo "/* Auto-generated by: https://github.com/foundation-ui/cli */" >"$OUTPUT_FILE" || error_exit "Error: Failed to write to output file '$OUTPUT_FILE'."
echo "" >>"$OUTPUT_FILE"
echo "import React from 'react';" >>"$OUTPUT_FILE"
echo "import { SVGProps } from 'react';" >>"$OUTPUT_FILE"
echo "" >>"$OUTPUT_FILE"

# Convert SVG file to TSX component and append to the output file
create_tsx_component() {
  local svg_file="$1"
  local filename=$(basename "$svg_file")

  # Check if the SVG file exists
  if [ ! -f "$svg_file" ]; then
    error_exit "Error: SVG file '$svg_file' does not exist."
  fi

  # Sanitize component name (more robust)
  local component_name=$(echo "$filename" | sed 's/\.svg$//' | sed 's/[^a-zA-Z0-9]/ /g' | awk '{for(i=1;i<=NF;i++) $i=toupper(substr($i,1,1)) tolower(substr($i,2))}1' | tr -d ' ')
  component_name=$(echo "$component_name" | sed 's/^[^a-zA-Z]*//') # Remove leading non-letters

  if [ -z "$component_name" ]; then
    echo "Warning: Could not generate valid component name for '$filename'. Skipping." >&2
    return
  fi

  # Extract SVG content
  local svg_content
  if ! svg_content=$(<"$svg_file"); then
    error_exit "Error: Failed to read SVG file '$svg_file'."
  fi

  # Replace '-rule' with 'Rule' in the SVG content
  svg_content=$(echo "$svg_content" | sed 's/-rule/Rule/g')

  # Ensure that the svg element includes the props spread
  svg_content=$(echo "$svg_content" | sed 's/<svg /<svg {...props} /')

  # Create TSX component content
  local tsx_content="
export const $component_name = (props: SVGProps<SVGSVGElement>) => (
  $svg_content
);
"

  # Replace placeholders for the component name
  tsx_content=$(echo "$tsx_content" | sed "s/\$component_name/$component_name/g")

  # Append the component to the output file
  if ! echo "$tsx_content" >>"$OUTPUT_FILE"; then
    error_exit "Error: Failed to write TSX component '$component_name' to output file '$OUTPUT_FILE'."
  fi
  echo "âœ… Added $component_name to $OUTPUT_FILE"
}

# Loop through all SVG files in the source directory and execute the create_tsx_component function
find "$SOURCE_DIR" -name "*.svg" -print0 | while IFS= read -r -d $'\0' svg_file; do
  create_tsx_component "$svg_file"
done


# Get memory usage (this is an approximation and might not be entirely accurate)
MEMORY_USAGE=$(ps -o rss= -p $$) # in kilobytes

echo "âœ¨ Icons library generated."
echo "ðŸ’½ Memory used: ${MEMORY_USAGE} KB"
