import { RESERVED_WORDS } from "../utils/reserved-words";
import type { SvgFile, TsxComponent } from "../types";

export const isInvalidComponentName = (name: string): boolean =>
  !name ||
  name.length === 0 ||
  /^[^a-zA-Z]/.test(name) ||
  RESERVED_WORDS.has(name.toLowerCase()) ||
  name.length > 128;

export const sanitizeComponentName = (filename: string): string => {
  const name = filename
    .replace(/\.svg$/i, "")
    .replace(/[^a-zA-Z0-9]/g, " ")
    .split(" ")
    .filter((word) => word.length > 0)
    .map((word) => word.charAt(0).toUpperCase() + word.slice(1).toLowerCase())
    .join("")
    .replace(/^[^a-zA-Z]*/, ""); // Remove leading non-letters

  return isInvalidComponentName(name) ? "" : name;
};

export const processSvgContent = (content: string): string => {
  let processed = content;
  processed = processed
    // Remove XML declaration and comments
    .replace(/<\?xml[^>]*\?>/g, "")
    .replace(/<!--[\s\S]*?-->/g, "")

    // Convert kebab-case attributes to camelCase
    .replace(/([a-zA-Z]+)-([a-zA-Z])/g, (_, p1, p2) => p1 + p2.toUpperCase())

    // Handle React-specific attribute name changes
    .replace(/class=/g, "className=")
    .replace(/for=/g, "htmlFor=")

    // Normalize whitespace and trim
    .replace(/\s+/g, " ")
    .trim();

  // Ensure props are spread on svg element
  if (processed.includes("<svg") && !processed.includes("{...props}")) {
    processed = processed.replace(/<svg([^>]*?)>/i, "<React.Fragment>");
  }
  if (processed.includes("</svg>") && !processed.includes("{...props}")) {
    processed = processed.replace("</svg>", "</React.Fragment>");
  }

  return processed;
};

export const createTsxComponent = (svgFile: SvgFile): TsxComponent | null => {
  const componentName = sanitizeComponentName(svgFile.name);
  if (!componentName) return null;

  const processedSvg = processSvgContent(svgFile.content);
  const content = `
  export const ${componentName} = () => (
    ${processedSvg}
  );
  ${componentName}.displayName = "Icon.${componentName}";
`;

  return { name: componentName, content };
};

export const generateHeader = (): string => `
/* Auto-generated by: https://github.com/foundation-ui/cli */\n
import React from 'react';\n
export const Icon = ({ children, ...restProps }: React.ComponentProps<"svg">) => {
  return (
    <svg
      focusable="false"
      aria-hidden="true"
      viewBox="0 0 24 24"
      width={16}
      height={16}
      fill={"currentColor"}
      {...restProps}
    >
      {children}
    </svg>
  );
}
Icon.displayName = "Icon";\n
`;

export const generateExportList = (componentNames: string[]): string => {
  if (componentNames.length === 0) return "";

  const parentComponentName = "Icon";
  const assignments = componentNames
    .sort() // Sort for consistent output
    .map((name) => `${parentComponentName}.${name} = ${name};`)
    .join("\n");

  return "\n" + assignments;
};
