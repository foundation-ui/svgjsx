import { RESERVED_WORDS } from "../utils/reserved-words";
import type { SvgFile, TsxComponent } from "../types";

export const isInvalidComponentName = (name: string): boolean =>
  !name ||
  name.length === 0 ||
  /^[^a-zA-Z]/.test(name) ||
  RESERVED_WORDS.has(name.toLowerCase()) ||
  name.length > 128; // Reasonable max length

export const sanitizeComponentName = (filename: string): string => {
  const name = filename
    .replace(/\.svg$/i, "")
    .replace(/[^a-zA-Z0-9]/g, " ")
    .split(" ")
    .filter((word) => word.length > 0)
    .map((word) => word.charAt(0).toUpperCase() + word.slice(1).toLowerCase())
    .join("")
    .replace(/^[^a-zA-Z]*/, ""); // Remove leading non-letters

  return isInvalidComponentName(name) ? "" : name;
};

export const processSvgContent = (content: string): string => {
  let processed = content;

  // SVG transformations for React compatibility
  processed = processed
    .replace(/-rule/g, "Rule")
    .replace(/class=/g, "className=")
    .replace(/for=/g, "htmlFor=")
    .replace(/<!--[\s\S]*?-->/g, "") // Remove comments
    .replace(/\s+/g, " ") // Normalize whitespace
    .trim();

  // Ensure props are spread on svg element
  if (processed.includes("<svg") && !processed.includes("{...props}")) {
    processed = processed.replace(/<svg([^>]*?)>/i, "<svg$1 {...props}>");
  }

  return processed;
};

export const createTsxComponent = (svgFile: SvgFile): TsxComponent | null => {
  const componentName = sanitizeComponentName(svgFile.name);
  if (!componentName) return null;

  const processedSvg = processSvgContent(svgFile.content);
  const content = `export const ${componentName} = (props: SVGProps<SVGSVGElement>) => (
  ${processedSvg}
);`;

  return { name: componentName, content };
};

export const generateHeader = (): string => `
/* Auto-generated by: https://github.com/foundation-ui/cli */

import React from 'react';
import type { SVGProps } from 'react';
`;
